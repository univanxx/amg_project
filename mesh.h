#ifndef MESH_H
#define MESH_H

#include <string>
#include "main.h"

namespace mesh
{
    struct surface
    {
        int A, B, C, D; // вершины грани (имеют тип point1)
        double area; // площадь грани
        double nx, ny, nz; // компоненты нормали в центре грани
        surface() :
            A(-1),
            B(-1),
            C(-1),
            D(-1),
            area(0.0),
            nx(0.0),
            ny(0.0),
            nz(0.0)
        {
        }
    };

    // главные узлы, соответствующие центру элементов, в которых ищем решение уравнений Эйлера (синяя точка)
    // по этим точкам выводится решение в файл gmsh
    struct point1
    {
        // ближайшие соседи точки по координатным направлениям
        int front = -1, right = -1, up = -1, back = -1, left = -1, down = -1;
        double x = 0.0, y = 0.0, z = 0.0; // координаты точки
        double distance = 0.0; // расстояние от точки до твердой поверхности
        short entry_or_boundary_condition = 0; // номер начального или граничного условия
        ElementType type;
        int surface = -1;  // номер граничной поверхности b_surface1 (красной), с которой берётся нормаль для расчёта ГУ
        bool is_node_on_real_border = false; // принадлежит ли данный узел реальной границе?
        bool is_node_on_hard_border = false;
        int output_number = -1; // номер элемента при выводе в GMSH файл
    };

    // внутренняя грань для элемента, по которому решаем уравнения Эйлера (красная грань)
    struct internal_surface1 : public surface
    {
        // координаты центра грани для интегрирования по поверхности формулой Гаусса
        double x = 0.0, y = 0.0, z = 0.0;
        double distance = 0.0; // расстояние от точки-центра грани до твердой поверхности
        // элементы, которым принадлежит эта грань: для element1 нормаль внешняя,
        // для element2 - внутренняя
        int element1 = -1, element2 = -1;
        bool is_two_elements = true;
    };

    // внешняя грань для элемента, по которому решаем уравнения Эйлера (красная грань)
    struct boundary_surface1 : surface
    {
        // координаты центра грани для интегрирования по поверхности формулой Гаусса
        double x = 0.0, y = 0.0, z = 0.0;
        double distance = 0.0; // расстояние от точки-центра грани до твердой поверхности
        int element1 = -1; // элемент, которому принадлежит эта грань (для него нормаль внешняя)
        short boundary_condition = 0; // номер граничного условия
        ElementType type;
    };

    // красный элемент
    struct hexahedron1
    {
        int A = -1, B = -1, C = -1, D = -1,
            E = -1, F = -1, G = -1, H = -1; // вершины гексаэдра (имеют тип point2)
        double volume = 0.0; // объём гексаэдра
    };

    // вспомогательные узлы, соответствующие центру элемента, по которому ищем градиенты функций (красная точка)
    struct point2
    {
        int neighbour = -1; // номер соседа, у которого берется значение градиента (только для граничных точек)
        double x = 0.0, y = 0.0, z = 0.0; // координаты точки
    };

    // внутренняя грань для элемента, по которому ищем градиенты функций (синяя грань)
    struct internal_surface2 : public surface
    {
        // элементы, которым принадлежит эта грань: для element1 нормаль внешняя,
        // для element2 - внутренняя
        int element1 = -1, element2 = -1;
    };

    // внешняя грань для элемента, по которому ищем градиенты функций (синяя грань)
    struct boundary_surface2 : public surface
    {
        int element1 = -1; // элемент, которому принадлежит эта грань (для него нормаль внешняя)
        short boundary_condition = 0; // номер граничного условия
        ElementType type;
    };

    // синий элемент
    struct hexahedron2
    {
        double volume = 0.0; // объём гексаэдра
    };

    bool LoadMesh(std::string p_mesh_file);
}

#endif // MESH_H

